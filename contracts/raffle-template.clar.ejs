;; felix-raffle-<%= name %>
;; v1
;; Learn more at https://felixapp.xyz/
;; ---
;;
(define-constant felix '<%= felix %>)
(define-constant draw-block (+ block-height u9))
(define-constant entries (list <%= entries.map(participant => `"${participant}"`).join(" ") %>))

(define-data-var winner (optional (string-ascii 40)) none)

(define-constant err-not-at-draw-block (err u400))
(define-constant err-standard-principal-only (err u401))
(define-constant err-unable-to-get-random-seed (err u500))
(define-constant err-winner-already-picked (err u501))

(define-private (is-standard-principal-call)
    (is-none (get name (unwrap! (principal-destruct? contract-caller) false))))

(define-read-only (get-entries)
    entries)

(define-read-only (get-winner)
    (var-get winner))


(define-public (pick-winner)
    (begin 
        (asserts! (is-standard-principal-call) err-standard-principal-only)
        (asserts! (is-none (var-get winner)) err-winner-already-picked)
        (asserts! (> block-height draw-block) err-not-at-draw-block)
        (let
            ((random-number (unwrap! (contract-call? '<%= felixRandomContract %> get-rnd draw-block) err-unable-to-get-random-seed))
            (winner-index (mod random-number (len entries)))
            (chosen-winner (element-at? entries winner-index)))
        (var-set winner chosen-winner)
        (ok chosen-winner))))
